// Code generated by mockery. DO NOT EDIT.

package workerpool

import (
	mock "github.com/stretchr/testify/mock"

	"github.com/LeoNdV001/workerpool"
	"github.com/LeoNdV001/workerpool/task"
)

// InterfaceWorkerPool is an autogenerated mock type for the InterfaceWorkerPool type
type InterfaceWorkerPool struct {
	mock.Mock
}

type InterfaceWorkerPool_Expecter struct {
	mock *mock.Mock
}

func (_m *InterfaceWorkerPool) EXPECT() *InterfaceWorkerPool_Expecter {
	return &InterfaceWorkerPool_Expecter{mock: &_m.Mock}
}

// AddTask provides a mock function with given fields: t
func (_m *InterfaceWorkerPool) AddTask(t task.InterfaceTask) error {
	ret := _m.Called(t)

	if len(ret) == 0 {
		panic("no return value specified for AddTask")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(task.InterfaceTask) error); ok {
		r0 = rf(t)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InterfaceWorkerPool_AddTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddTask'
type InterfaceWorkerPool_AddTask_Call struct {
	*mock.Call
}

// AddTask is a helper method to define mock.On call
//   - t task.InterfaceTask
func (_e *InterfaceWorkerPool_Expecter) AddTask(t interface{}) *InterfaceWorkerPool_AddTask_Call {
	return &InterfaceWorkerPool_AddTask_Call{Call: _e.mock.On("AddTask", t)}
}

func (_c *InterfaceWorkerPool_AddTask_Call) Run(run func(t task.InterfaceTask)) *InterfaceWorkerPool_AddTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(task.InterfaceTask))
	})
	return _c
}

func (_c *InterfaceWorkerPool_AddTask_Call) Return(_a0 error) *InterfaceWorkerPool_AddTask_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *InterfaceWorkerPool_AddTask_Call) RunAndReturn(run func(task.InterfaceTask) error) *InterfaceWorkerPool_AddTask_Call {
	_c.Call.Return(run)
	return _c
}

// Await provides a mock function with given fields:
func (_m *InterfaceWorkerPool) Await() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Await")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InterfaceWorkerPool_Await_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Await'
type InterfaceWorkerPool_Await_Call struct {
	*mock.Call
}

// Await is a helper method to define mock.On call
func (_e *InterfaceWorkerPool_Expecter) Await() *InterfaceWorkerPool_Await_Call {
	return &InterfaceWorkerPool_Await_Call{Call: _e.mock.On("Await")}
}

func (_c *InterfaceWorkerPool_Await_Call) Run(run func()) *InterfaceWorkerPool_Await_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *InterfaceWorkerPool_Await_Call) Return(_a0 error) *InterfaceWorkerPool_Await_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *InterfaceWorkerPool_Await_Call) RunAndReturn(run func() error) *InterfaceWorkerPool_Await_Call {
	_c.Call.Return(run)
	return _c
}

// Done provides a mock function with given fields:
func (_m *InterfaceWorkerPool) Done() {
	_m.Called()
}

// InterfaceWorkerPool_Done_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Done'
type InterfaceWorkerPool_Done_Call struct {
	*mock.Call
}

// Done is a helper method to define mock.On call
func (_e *InterfaceWorkerPool_Expecter) Done() *InterfaceWorkerPool_Done_Call {
	return &InterfaceWorkerPool_Done_Call{Call: _e.mock.On("Done")}
}

func (_c *InterfaceWorkerPool_Done_Call) Run(run func()) *InterfaceWorkerPool_Done_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *InterfaceWorkerPool_Done_Call) Return() *InterfaceWorkerPool_Done_Call {
	_c.Call.Return()
	return _c
}

func (_c *InterfaceWorkerPool_Done_Call) RunAndReturn(run func()) *InterfaceWorkerPool_Done_Call {
	_c.Call.Return(run)
	return _c
}

// GetBufferSize provides a mock function with given fields:
func (_m *InterfaceWorkerPool) GetBufferSize() uint {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetBufferSize")
	}

	var r0 uint
	if rf, ok := ret.Get(0).(func() uint); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}

// InterfaceWorkerPool_GetBufferSize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBufferSize'
type InterfaceWorkerPool_GetBufferSize_Call struct {
	*mock.Call
}

// GetBufferSize is a helper method to define mock.On call
func (_e *InterfaceWorkerPool_Expecter) GetBufferSize() *InterfaceWorkerPool_GetBufferSize_Call {
	return &InterfaceWorkerPool_GetBufferSize_Call{Call: _e.mock.On("GetBufferSize")}
}

func (_c *InterfaceWorkerPool_GetBufferSize_Call) Run(run func()) *InterfaceWorkerPool_GetBufferSize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *InterfaceWorkerPool_GetBufferSize_Call) Return(_a0 uint) *InterfaceWorkerPool_GetBufferSize_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *InterfaceWorkerPool_GetBufferSize_Call) RunAndReturn(run func() uint) *InterfaceWorkerPool_GetBufferSize_Call {
	_c.Call.Return(run)
	return _c
}

// GetWorkers provides a mock function with given fields:
func (_m *InterfaceWorkerPool) GetWorkers() uint {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetWorkers")
	}

	var r0 uint
	if rf, ok := ret.Get(0).(func() uint); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}

// InterfaceWorkerPool_GetWorkers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWorkers'
type InterfaceWorkerPool_GetWorkers_Call struct {
	*mock.Call
}

// GetWorkers is a helper method to define mock.On call
func (_e *InterfaceWorkerPool_Expecter) GetWorkers() *InterfaceWorkerPool_GetWorkers_Call {
	return &InterfaceWorkerPool_GetWorkers_Call{Call: _e.mock.On("GetWorkers")}
}

func (_c *InterfaceWorkerPool_GetWorkers_Call) Run(run func()) *InterfaceWorkerPool_GetWorkers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *InterfaceWorkerPool_GetWorkers_Call) Return(_a0 uint) *InterfaceWorkerPool_GetWorkers_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *InterfaceWorkerPool_GetWorkers_Call) RunAndReturn(run func() uint) *InterfaceWorkerPool_GetWorkers_Call {
	_c.Call.Return(run)
	return _c
}

// Quit provides a mock function with given fields:
func (_m *InterfaceWorkerPool) Quit() {
	_m.Called()
}

// InterfaceWorkerPool_Quit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Quit'
type InterfaceWorkerPool_Quit_Call struct {
	*mock.Call
}

// Quit is a helper method to define mock.On call
func (_e *InterfaceWorkerPool_Expecter) Quit() *InterfaceWorkerPool_Quit_Call {
	return &InterfaceWorkerPool_Quit_Call{Call: _e.mock.On("Quit")}
}

func (_c *InterfaceWorkerPool_Quit_Call) Run(run func()) *InterfaceWorkerPool_Quit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *InterfaceWorkerPool_Quit_Call) Return() *InterfaceWorkerPool_Quit_Call {
	_c.Call.Return()
	return _c
}

func (_c *InterfaceWorkerPool_Quit_Call) RunAndReturn(run func()) *InterfaceWorkerPool_Quit_Call {
	_c.Call.Return(run)
	return _c
}

// Reset provides a mock function with given fields:
func (_m *InterfaceWorkerPool) Reset() {
	_m.Called()
}

// InterfaceWorkerPool_Reset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Reset'
type InterfaceWorkerPool_Reset_Call struct {
	*mock.Call
}

// Reset is a helper method to define mock.On call
func (_e *InterfaceWorkerPool_Expecter) Reset() *InterfaceWorkerPool_Reset_Call {
	return &InterfaceWorkerPool_Reset_Call{Call: _e.mock.On("Reset")}
}

func (_c *InterfaceWorkerPool_Reset_Call) Run(run func()) *InterfaceWorkerPool_Reset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *InterfaceWorkerPool_Reset_Call) Return() *InterfaceWorkerPool_Reset_Call {
	_c.Call.Return()
	return _c
}

func (_c *InterfaceWorkerPool_Reset_Call) RunAndReturn(run func()) *InterfaceWorkerPool_Reset_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields:
func (_m *InterfaceWorkerPool) Start() workerpool.InterfaceWorkerPool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 workerpool.InterfaceWorkerPool
	if rf, ok := ret.Get(0).(func() workerpool.InterfaceWorkerPool); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(workerpool.InterfaceWorkerPool)
		}
	}

	return r0
}

// InterfaceWorkerPool_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type InterfaceWorkerPool_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
func (_e *InterfaceWorkerPool_Expecter) Start() *InterfaceWorkerPool_Start_Call {
	return &InterfaceWorkerPool_Start_Call{Call: _e.mock.On("Start")}
}

func (_c *InterfaceWorkerPool_Start_Call) Run(run func()) *InterfaceWorkerPool_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *InterfaceWorkerPool_Start_Call) Return(_a0 workerpool.InterfaceWorkerPool) *InterfaceWorkerPool_Start_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *InterfaceWorkerPool_Start_Call) RunAndReturn(run func() workerpool.InterfaceWorkerPool) *InterfaceWorkerPool_Start_Call {
	_c.Call.Return(run)
	return _c
}

// UseDefaults provides a mock function with given fields:
func (_m *InterfaceWorkerPool) UseDefaults() workerpool.InterfaceWorkerPool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for UseDefaults")
	}

	var r0 workerpool.InterfaceWorkerPool
	if rf, ok := ret.Get(0).(func() workerpool.InterfaceWorkerPool); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(workerpool.InterfaceWorkerPool)
		}
	}

	return r0
}

// InterfaceWorkerPool_UseDefaults_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UseDefaults'
type InterfaceWorkerPool_UseDefaults_Call struct {
	*mock.Call
}

// UseDefaults is a helper method to define mock.On call
func (_e *InterfaceWorkerPool_Expecter) UseDefaults() *InterfaceWorkerPool_UseDefaults_Call {
	return &InterfaceWorkerPool_UseDefaults_Call{Call: _e.mock.On("UseDefaults")}
}

func (_c *InterfaceWorkerPool_UseDefaults_Call) Run(run func()) *InterfaceWorkerPool_UseDefaults_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *InterfaceWorkerPool_UseDefaults_Call) Return(_a0 workerpool.InterfaceWorkerPool) *InterfaceWorkerPool_UseDefaults_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *InterfaceWorkerPool_UseDefaults_Call) RunAndReturn(run func() workerpool.InterfaceWorkerPool) *InterfaceWorkerPool_UseDefaults_Call {
	_c.Call.Return(run)
	return _c
}

// WithBufferSize provides a mock function with given fields: bufferSize
func (_m *InterfaceWorkerPool) WithBufferSize(bufferSize uint) workerpool.InterfaceWorkerPool {
	ret := _m.Called(bufferSize)

	if len(ret) == 0 {
		panic("no return value specified for WithBufferSize")
	}

	var r0 workerpool.InterfaceWorkerPool
	if rf, ok := ret.Get(0).(func(uint) workerpool.InterfaceWorkerPool); ok {
		r0 = rf(bufferSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(workerpool.InterfaceWorkerPool)
		}
	}

	return r0
}

// InterfaceWorkerPool_WithBufferSize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithBufferSize'
type InterfaceWorkerPool_WithBufferSize_Call struct {
	*mock.Call
}

// WithBufferSize is a helper method to define mock.On call
//   - bufferSize uint
func (_e *InterfaceWorkerPool_Expecter) WithBufferSize(bufferSize interface{}) *InterfaceWorkerPool_WithBufferSize_Call {
	return &InterfaceWorkerPool_WithBufferSize_Call{Call: _e.mock.On("WithBufferSize", bufferSize)}
}

func (_c *InterfaceWorkerPool_WithBufferSize_Call) Run(run func(bufferSize uint)) *InterfaceWorkerPool_WithBufferSize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *InterfaceWorkerPool_WithBufferSize_Call) Return(_a0 workerpool.InterfaceWorkerPool) *InterfaceWorkerPool_WithBufferSize_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *InterfaceWorkerPool_WithBufferSize_Call) RunAndReturn(run func(uint) workerpool.InterfaceWorkerPool) *InterfaceWorkerPool_WithBufferSize_Call {
	_c.Call.Return(run)
	return _c
}

// WithWorkers provides a mock function with given fields: workers
func (_m *InterfaceWorkerPool) WithWorkers(workers uint) workerpool.InterfaceWorkerPool {
	ret := _m.Called(workers)

	if len(ret) == 0 {
		panic("no return value specified for WithWorkers")
	}

	var r0 workerpool.InterfaceWorkerPool
	if rf, ok := ret.Get(0).(func(uint) workerpool.InterfaceWorkerPool); ok {
		r0 = rf(workers)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(workerpool.InterfaceWorkerPool)
		}
	}

	return r0
}

// InterfaceWorkerPool_WithWorkers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithWorkers'
type InterfaceWorkerPool_WithWorkers_Call struct {
	*mock.Call
}

// WithWorkers is a helper method to define mock.On call
//   - workers uint
func (_e *InterfaceWorkerPool_Expecter) WithWorkers(workers interface{}) *InterfaceWorkerPool_WithWorkers_Call {
	return &InterfaceWorkerPool_WithWorkers_Call{Call: _e.mock.On("WithWorkers", workers)}
}

func (_c *InterfaceWorkerPool_WithWorkers_Call) Run(run func(workers uint)) *InterfaceWorkerPool_WithWorkers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *InterfaceWorkerPool_WithWorkers_Call) Return(_a0 workerpool.InterfaceWorkerPool) *InterfaceWorkerPool_WithWorkers_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *InterfaceWorkerPool_WithWorkers_Call) RunAndReturn(run func(uint) workerpool.InterfaceWorkerPool) *InterfaceWorkerPool_WithWorkers_Call {
	_c.Call.Return(run)
	return _c
}

// NewInterfaceWorkerPool creates a new instance of InterfaceWorkerPool. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewInterfaceWorkerPool(t interface {
	mock.TestingT
	Cleanup(func())
}) *InterfaceWorkerPool {
	mock := &InterfaceWorkerPool{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
